The purpose of this Portfolio Project was to elaborate a recommendation programm: it is what I have done by coding a simulation of video platform where users can either add videos or search and watch videos by performing searches in the videos database.

To the main Jupyter Notebook is associated a csv file that contains all the metadata of a range of videos: 'id'; 'title', 'category', 'duration', 'publish_date', 'days_online', 'viewed'. The main notebook itself contains the head function for running the programm (simply called 'GlobeStream()', from the name of our imagined video platform) as well as the tier 2 and 3 support functions which constitute its building blocks. The csv file and the notebook are associated in the sense that the user downloads search results information from the csv, adds new videos to the csv, and there is also a refresh function that gets triggered when launching the program and which updates the recentness ('days_online') and the views count ('viewed') of each individual record.

The 'input()' function is a core element of this programm too, because it allows the user to communicate with the head function: orient the research, do additions to the videos database, select a video to 'watch' (we pretend that upon selection the video is watched, in reality nothing is happening).

An other element worth noting is the recursivity of the 'GlobeStream()' function, which allows to potentially infinitely iterate interactions with the videos platform. Each time that an interaction is completed (add a video or do a simple search or an advanced search and watch or not watch), the 'GlobeStream()' function gets triggered again, launching a new loop of interaction with the user.

The tier-2 building blocks of the head function are: the 'refresh_videos_job()' function, previously mentionned, which refreshes the days and views counts of the videos, the 'add_video()' function, the 'search_video()' function, and the 'watch_video()' function. 

The 'search_video()' function is especially complex because it integrates the possibility for the user to do either a simple search (just write some text elements that get matched afterwards with all the titles of videos) or an advanced search in which almost all the metadata ('title', 'category', 'duration', 'days_online', 'viewed') can but don't have to be subject to user-specified criteria. It is also complex in the sense that during an advanced search, depending on the characteristic that is checked, the check mode differs and I designed 4 different helper functions tailored to what verification needs to be made (for example, checking for equality of the text user input with some characteristic of the record is different from checking for inferiority of the numerical user input to some other characteristic).

The 'watch_video()' function is dependent from the 'search_video()' because this latter function's output is its input: the 'watch_video()' function allows to select a video to 'watch' from the search results and the search results only. Of course if the search returns no results, it is simply not triggered.

I hope you will enjoy reviewing this code and watching countless imaginary videos!